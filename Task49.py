# Задача №49. Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Пример ввода и вывода данных представлены на
# следующем слайде 20 минут
# Семинар 7. Функции высшего порядка
# Задача №49
# Ввод: orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод: 2.5 10

# def find_farthest_orbit(orbs):
#     max_orb = -1
#     max_i = 0
#     for i, p in enumerate(orbs):
#         a, b = p
#         if a == b:
#             continue
#         orb = a * b
#         if orb > max_orb:
#             max_orb = orb
#             max_i = i
#     return orbs[max_i]

# def find_farthest_orbit(orbs):
#     orbs = list(filter(lambda p: p[0] != p[1], orbs))
#     max_orbs = list(map(lambda p: p[0] * p[1], orbs))
#     return orbs[max_orbs.index(max(max_orbs))]

def find_farthest_orbit(orbs):
    orbs = {p[0] * p[1] if p[0] != p[1] else 0: p for p in orbs}
    return orbs[(max(orbs.keys()))]


orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))
